



(No Working Group)                                        S. Arciszewski
Internet-Draft                            Paragon Initiative Enterprises
Intended status: Informational                           August 28, 2018
Expires: March 1, 2019


                     XChaCha: eXtended-nonce ChaCha
                            draft-xchacha-00

Abstract

   TODO

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 1, 2019.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.







Arciszewski               Expires March 1, 2019                 [Page 1]

Internet-Draft                                               August 2018


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Notation and Conventions  . . . . . . . . . . . . . . . .   2
   2.  AEAD_XChaCha20_Poly1305 . . . . . . . . . . . . . . . . . . .   2
     2.1.  Motivation for XChaCha20-Poly1305 . . . . . . . . . . . .   2
     2.2.  HChaCha20 . . . . . . . . . . . . . . . . . . . . . . . .   3
       2.2.1.  Test Vector for the HChaCha20 Block Function  . . . .   4
   3.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   4
     3.1.  Normative References  . . . . . . . . . . . . . . . . . .   4
     3.2.  URIs  . . . . . . . . . . . . . . . . . . . . . . . . . .   5
   Appendix A.  Additional Test Vectors  . . . . . . . . . . . . . .   5
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   5

1.  Introduction

   TODO

1.1.  Notation and Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

2.  AEAD_XChaCha20_Poly1305

   XChaCha20-Poly1305 is a variant of the ChaCha20-Poly1305 AEAD
   construction as defined in [RFC7539] that uses a 192-bit nonce
   instead of a 64-bit nonce.

   The algorithm for XChaCha20-Poly1305 is as follows:

   1.  Calculate a subkey from the first 16 bytes of the nonce and the
       key, using HChaCha20 (Section 2.2).

   2.  Use the subkey and remaining 8 bytes of the nonce (prefixed with
       4 NUL bytes) with AEAD_CHACHA20_POLY1305 from [RFC7539] as
       normal.

   XChaCha20-Poly1305 implementations already exist in libsodium [1],
   Monocypher [2], xsecretbox [3], and a standalone Go [4] library.

2.1.  Motivation for XChaCha20-Poly1305

   The nonce used by the original ChaCha20-Poly1305 is too short to
   safely use with random strings for long-lived keys.
   XChaCha20-Poly1305 does not have this restriction.




Arciszewski               Expires March 1, 2019                 [Page 2]

Internet-Draft                                               August 2018


   By generating a subkey from a 128-bit nonce and the key, a reuse of
   only the latter 64 bits of the nonce isn't security-affecting, since
   the key (and thus, keystream) will be different.

   Assuming a secure random number generator, random 192-bit nonces
   should experience a single collision (with probability 50%) after
   roughly 2^96 messages (approximately 7.2998163e+28).  A more
   conservative threshold (2^-32 chance of collision) still allows for
   2^64 messages to be sent under a single key.

   Therefore, with XChaCha20-Poly1305, users can safely generate a
   random 192-bit nonce for each message and not worry about nonce-reuse
   vulnerabilities.

   As long as ChaCha20-Poly1305 is a secure AEAD cipher and ChaCha is a
   secure pseudorandom function (PRF), XChaCha20-Poly1305 is secure.

2.2.  HChaCha20

   *HChaCha20* is an intermediary step towards XChaCha20 based on the
   construction and security proof used to create XSalsa20 [5], an
   extended-nonce Salsa20 variant used in NaCl [6].

   HChaCha20 is initialized the same way as the ChaCha cipher, except
   that HChaCha20 uses a 128-bit nonce and has no counter.

   Consider the two figures below, where each non-whitespace character
   represents one nibble of information about the ChaCha states (all
   numbers little-endian):

                  cccccccc  cccccccc  cccccccc  cccccccc
                  kkkkkkkk  kkkkkkkk  kkkkkkkk  kkkkkkkk
                  kkkkkkkk  kkkkkkkk  kkkkkkkk  kkkkkkkk
                  bbbbbbbb  nnnnnnnn  nnnnnnnn  nnnnnnnn

           ChaCha20 State: c=constant k=key b=blockcount n=nonce

                  cccccccc  cccccccc  cccccccc  cccccccc
                  kkkkkkkk  kkkkkkkk  kkkkkkkk  kkkkkkkk
                  kkkkkkkk  kkkkkkkk  kkkkkkkk  kkkkkkkk
                  nnnnnnnn  nnnnnnnn  nnnnnnnn  nnnnnnnn

                 HChaCha20 State: c=constant k=key n=nonce

   After initialization, proceed through the ChaCha rounds as usual.






Arciszewski               Expires March 1, 2019                 [Page 3]

Internet-Draft                                               August 2018


   Once the 20 ChaCha rounds have been completed, the first 128 bits and
   last 128 bits of the keystream (both little-endian) are concatenated,
   and this 256-bit subkey is returned.

2.2.1.  Test Vector for the HChaCha20 Block Function

   o  Key = 00:01:02:03:04:05:06:07:08:09:0a:0b:0c:0d:0e:0f:10:11:12:13:
      14:15:16:17:18:19:1a:1b:1c:1d:1e:1f.  The key is a sequence of
      octets with no particular structure before we copy it into the
      HChaCha state.

   o  Nonce = (00:00:00:09:00:00:00:4a:00:00:00:00:31:41:59:27)

   After setting up the HChaCha state, it looks like this:

                    61707865 3320646e 79622d32 6b206574
                    03020100 07060504 0b0a0908 0f0e0d0c
                    13121110 17161514 1b1a1918 1f1e1d1c
                    09000000 4a000000 00000000 27594131

                     ChaCha state with the key setup.

   After running 20 rounds (10 column rounds interleaved with 10
   "diagonal rounds"), the HChaCha state looks like this:

                    82413b42 27b27bfe d30e4250 8a877d73
                    4864a70a f3cd5479 37cd6a84 ad583c7b
                    8355e377 127ce783 2d6a07e0 e5d06cbc
                    a0f9e4d5 8a74a853 c12ec413 26d3ecdc

                       HChaCha state after 20 rounds

   HChaCha20 will then return only the first and last rows, resulting in
   the following 256-bit key:

                    82413b4 227b27bfe d30e4250 8a877d73
                    a0f9e4d 58a74a853 c12ec413 26d3ecdc

                        Resultant HChaCha20 subkey

3.  References

3.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.



Arciszewski               Expires March 1, 2019                 [Page 4]

Internet-Draft                                               August 2018


   [RFC7539]  Nir, Y. and A. Langley, "ChaCha20 and Poly1305 for IETF
              Protocols", RFC 7539, DOI 10.17487/RFC7539, May 2015,
              <https://www.rfc-editor.org/info/rfc7539>.

3.2.  URIs

   [1] https://download.libsodium.org/doc/secret-key_cryptography/
       xchacha20-poly1305_construction.html

   [2] https://github.com/LoupVaillant/Monocypher

   [3] https://github.com/jedisct1/xsecretbox

   [4] https://github.com/aead/chacha20

   [5] https://cr.yp.to/snuffle/xsalsa-20110204.pdf

   [6] https://nacl.cr.yp.to

Appendix A.  Additional Test Vectors

Author's Address

   Scott Arciszewski
   Paragon Initiative Enterprises
   United States

   Email: security@paragonie.com























Arciszewski               Expires March 1, 2019                 [Page 5]
